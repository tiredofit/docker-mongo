#!/usr/bin/with-contenv bash

while [ ! -f /tmp/state/10-mongodb-init ]
do
  sleep 1
done

### Set Debug Mode
if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ]; then
    set -x
fi

### Set Defaults and Sanity Test
ADMIN_USER=${ADMIN_USER:-"admin"}
ADMIN_PASS=${ADMIN_PASS:-"admin"}
DB_NAME=${DB_NAME:-"admin"}
DB_PORT=${DB_PORT:-"27017"}

mkdir -p /data/db	
cmd="mongod --bind_ip 0.0.0.0 \
            --port $DB_PORT \
            --storageEngine $STORAGE_ENGINE \
            --timeStampFormat iso8601-local"

if [ "$ENABLE_AUTHENTICATION" = "TRUE" ] || [ "$ENABLE_AUTHENTICATION" = "true" ] ; then
    cmd="$cmd \ --auth"
fi
 
if [ "$ENABLE_JOURNALING" = "FALSE" ] || [ "$ENABLE_JOURNALING" = "false" ]; then
    cmd="$cmd \ --nojournal"
fi

if [ "$ENABLE_LOGS" = "TRUE" ] || [ "$ENABLE_LOGS" = "true" ]; then
    mkdir -p /data/logs
    cat <<EOF > /etc/logrotate.d/mongodb.conf
/data/logs/*.log {
daily
ifempty
rotate 7
missingok
compress
dateext
copytruncate
}
EOF
    chmod -R 755 /etc/logrotate.d/mongodb.conf
    cmd="$cmd \ --logpath /data/logs/mongodb.log \ --logappend"
fi

#if [ "$ENABLE_REPLICATION" = "TRUE" ] || [ "$ENABLE_SMALLFILES" = "TRUE" ]; then
#    cmd="$cmd \ --replSet $REPLICATION_NAME"
#fi 

if [ "$ENABLE_SMALLFILES" = "TRUE" ] || [ "$ENABLE_SMALLFILES" = "TRUE" ]; then
    cmd="$cmd \ --smallfiles"
fi

if [ "$MAX_CONNECTIONS" != "" ]; then 
    cmd="$cmd \ --maxConns $MAX_CONNECTIONS"
fi

if [ "$OPLOG_SIZE" != "" ]; then
    cmd="$cmd \ --oplogSize $OPLOG_SIZE"
fi

if [ -n "$ADDITIONAL_PARAMETERS" ]; then
    cmd="$cmd \ $ADDITIONAL_PARAMETERS"
fi

chown -R mongodb:mongodb /data/

if [ ! -f "/data/db/.mongodb_init" ]; then
    if [ ! -f "/data/db/.mongodb_password_set" ]; then
        echo "** [mongodb] Configuring MongoDB Start up Options"
        sudo -u mongodb $cmd --logpath /dev/null & > /dev/null 2>&1 

        ### Wait for MongoDB to boot
        COUNTER=1
        while [[ COUNTER -ne 0 ]]; do
            echo "** [mongodb] Waiting for confirmation of MongoDB service startup"
            sleep 5
            mongo admin --eval "help" >/dev/null 2>&1
            COUNTER=$?
        done
         
        ### Create the admin user 
        echo "** [mongodb] Creating admin user with a password in MongoDB"
        mongo admin --eval "db.createUser({user: '$ADMIN_USER', pwd: '$ADMIN_PASS', roles:[{role:'root',db:'admin'}]});" > /dev/null 2>&1
        sleep 3
 
        ### If we've defined the DB_NAME environment variable and it's a different database than admin, then create the user for that database.
        if [ "$DB_NAME" != "admin" ]; then
            echo "** [mongodb] Creating a DB:$DB_NAME user with a password in MongoDB"
            mongo admin -u $ADMIN_USER -p $ADMIN_PASS >/dev/null 2>&1<< EOF
use $DB_NAME
db.createUser({user: '$DB_USER', pwd: '$DB_PASS', roles:[{role:'dbOwner',db:'$DB_NAME'}]})
EOF
        fi
 
        sleep 1
        touch /data/db/.mongodb_password_set
        echo "First Initialized on:" `date` >/data/db/.mongodb_init
        echo "Initial Version:" `mongod --version | head -n1 | awk '{print $3}'` > /data/db/.mongodb_init
        mongod --shutdown  > /dev/null 2>&1 
    fi
fi
    
echo '** [mongodb] Starting MongoDB'
exec sudo -u mongodb $cmd